"use strict";

const dynamoDBClient = require("./dynamoDBClient");

// You can use console.log for debugging purposes.

function queryUserNotes(userEmail) {
  // Use the following date format for "now"
  const dateNow = new Date().toISOString();
  var params = {
    TableName: "user-notes",
    KeyConditionExpression: "#user = :userEmail and create_date <= :dateNow",
    ExpressionAttributeNames: {
      "#user": "user",
    },
    ExpressionAttributeValues: {
      ":userEmail": userEmail,
      ":dateNow": dateNow,
    },
    Limit: 10,
    ScanIndexForward: false,
  };
  return new Promise((resolve, reject) => {
    // Query the DynamoDB database..

    dynamoDBClient.query(params, function (err, data) {
      if (err) {
        console.log(err);
        reject(err);
      } else {
        resolve(data.Items);
      }
    });
  });
}

function statusResponse(statusCode) {
  return {
    statusCode,
  };
}

function getAuthenticatedUserEmail(token) {
  var params = {
    TableName: "token-email-lookup",
    Key: {
      token: token,
    },
  };
  console.log(params);
  return new Promise((resolve, reject) => {
    dynamoDBClient.get(params, function (err, data) {
      if (err) reject(err);
      else {
        // Validate the given token with one from the database and return user email if the tokens match ...
        if (data.Item) {
          resolve(data.Item.email);
        } else {
          resolve(null);
        }
      }
    });
  });
}

async function authenticateUser(headers) {
  const authenticationHeader = headers["Authentication"];
  console.log(authenticationHeader);
  // Validate the Authentication header

  if (
    !authenticationHeader ||
    authenticationHeader.includes("Bearer ") === false
  )
    return statusResponse(400);

  const token = authenticationHeader.split(" ")[1];

  if (!token) return statusResponse(403);

  console.log(token);

  const userEmail = await getAuthenticatedUserEmail(token);
  if (!userEmail) return statusResponse(403);
  return userEmail;
}

module.exports.handler = (event, context, callback) => {
  const { headers } = event;

  authenticateUser(headers)
    .then(queryUserNotes)
    .then((notes) => {
      const response = {
        statusCode: 200,
        headers: {
          "Access-Control-Allow-Origin": "*", // Required for CORS support to work
        },
        body: JSON.stringify(notes),
      };
      callback(null, response);
    })
    .catch((err) => {
      callback(null, err);
    });
};

// Don't modify following exports, tests break without them.
module.exports.getAuthenticatedUserEmail = getAuthenticatedUserEmail;
